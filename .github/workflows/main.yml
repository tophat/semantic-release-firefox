name: Semantic Release Firefox Add-on CICD
on: pull_request

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['12', '14']
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - name: Build
        run: yarn build
  e2e:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['12', '14']   
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - name: E2E
        run: |
          cd e2e
          yarn test-e2e
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: ['12', '14']   
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node }}
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - name: Test
        run: |
          yarn test-coverage
      - uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: artifacts/coverage
  coverage:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - uses: actions/download-artifact@v2
        with:
          name: coverage-report
      - name: Test
        run: |
          yarn report-coverage
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - name: Lint
        run: yarn lint
  release:
    # Semantic release controls whether this runs or dry-runs.
    # Non-master branches will dry-run.
    runs-on: ubuntu-latest
    needs: [lint, test, build, e2e]
    steps:
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@v2
        with:
          node-version: 14
      - name: Yarn Cache
        id: yarn-cache
        uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{runner.os}}-yarn-
      - name: Install dependencies
        if: steps.yarn-cache.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile --ci
      - name: Release
        run: |
          yarn build
          yarn release
